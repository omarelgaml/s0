{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Georgia;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red61\green52\blue46;\red251\green251\blue249;\red234\green54\blue39;
\red16\green117\blue149;\red38\green38\blue38;\red234\green234\blue234;\red117\green117\blue117;}
{\*\expandedcolortbl;;\cssrgb\c30588\c26667\c23529;\cssrgb\c98824\c98824\c98039;\cssrgb\c94510\c30588\c19608;
\cssrgb\c1176\c53333\c65098;\cssrgb\c20000\c20000\c20000;\cssrgb\c93333\c93333\c93333;\cssrgb\c53333\c53333\c53333;}
\margl1440\margr1440\vieww26820\viewh14580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
3.1 Git Branching - Branches in a Nutshell\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 Nearly every VCS has some form of branching support. Branching means you diverge from the main line of development and continue to do work without messing with that main line. In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.\cb1 \
\cb3 Some people refer to Git\'92s branching model as its \'93killer feature,\'94 and it certainly sets Git apart in the VCS community. Why is it so special? The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast. Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day. Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf4 \cb3 Branches in a Nutshell\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \cb3 To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.\cb1 \
\cb3 As you may remember from {\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/ch00/ch01-getting-started"}}{\fldrslt \cf5 \cb3 Getting Started}}, Git doesn\'92t store data as a series of changesets or differences, but instead as a series of snapshots.\cb1 \
\cb3 When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged. This object also contains the author\'92s name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.\cb1 \
\cb3 To visualize this, let\'92s assume that you have a directory containing three files, and you stage them all and commit. Staging the files computes a checksum for each one (the SHA-1 hash we mentioned in {\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/ch00/ch01-getting-started"}}{\fldrslt \cf5 \cb3 Getting Started}}), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ git add README test.rb LICENSE\
$ git commit -m 'The initial commit of my project'\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 When you create the commit by running 
\f2 \cf6 \cb7 git commit
\f1 \cf2 \cb3 , Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.\cb1 \
\cb3 Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 {{\NeXTGraphic commit-and-tree.png \width16000 \height8860 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 9. A commit and its tree\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 {{\NeXTGraphic commits-and-parents.png \width16000 \height5300 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 10. Commits and their parents\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3 . As you start making commits, you\'92re given a 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3  branch that points to the last commit you made. Every time you commit, it moves forward automatically.\cb1 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart600 \tamarb600 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrb\brdrs\brdrw20\brdrcf8 \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3280\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt120 \clpadl120 \clpadb120 \clpadr120 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt120 \clpadl120 \clpadb120 \clpadr120 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs24 \cf2 \cb3 Note\cb1 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 \cb3 The \'93master\'94 branch in Git is not a special branch. It is exactly like any other branch. The only reason nearly every repository has one is that the 
\f2 \cf6 \cb7 git init
\f1 \cf2 \cb3  command creates it by default and most people don\'92t bother to change it.\cb1 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 {{\NeXTGraphic branch-and-history.png \width16000 \height8600 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 11. A branch and its commit history\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs32 \cf2 \cb3 Creating a New Branch\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \cb3 What happens if you create a new branch? Well, doing so creates a new pointer for you to move around. Let\'92s say you create a new branch called testing. You do this with the 
\f2 \cf6 \cb7 git branch
\f1 \cf2 \cb3  command:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ git branch testing\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 This creates a new pointer to the same commit you\'92re currently on.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 {{\NeXTGraphic two-branches.png \width16000 \height6620 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 12. Two branches pointing into the same series of commits\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 How does Git know what branch you\'92re currently on? It keeps a special pointer called 
\f2 \cf6 \cb7 HEAD
\f1 \cf2 \cb3 . Note that this is a lot different than the concept of 
\f2 \cf6 \cb7 HEAD
\f1 \cf2 \cb3  in other VCSs you may be used to, such as Subversion or CVS. In Git, this is a pointer to the local branch you\'92re currently on. In this case, you\'92re still on 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3 . The 
\f2 \cf6 \cb7 git branch
\f1 \cf2 \cb3  command only 
\i \cf2 \cb3 created
\i0 \cf2 \cb3  a new branch\uc0\u8201 \'97\u8201 it didn\'92t switch to that branch.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 {{\NeXTGraphic head-to-master.png \width16000 \height9340 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 13. HEAD pointing to a branch\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 You can easily see this by running a simple 
\f2 \cf6 \cb7 git log
\f1 \cf2 \cb3  command that shows you where the branch pointers are pointing. This option is called 
\f2 \cf6 \cb7 --decorate
\f1 \cf2 \cb3 .\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ git log --oneline --decorate\
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface\
34ac2 Fixed bug #1328 - stack overflow under certain conditions\
98ca9 The initial commit of my project\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 You can see the \'93master\'94 and \'93testing\'94 branches that are right there next to the 
\f2 \cf6 \cb7 f30ab
\f1 \cf2 \cb3  commit.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \cb3 Switching Branches\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs28 \cf2 \cb3 To switch to an existing branch, you run the 
\f2 \cf6 \cb7 git checkout
\f1 \cf2 \cb3  command. Let\'92s switch to the new 
\f2 \cf6 \cb7 testing
\f1 \cf2 \cb3  branch:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ git checkout testing\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 This moves 
\f2 \cf6 \cb7 HEAD
\f1 \cf2 \cb3  to point to the 
\f2 \cf6 \cb7 testing
\f1 \cf2 \cb3  branch.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 {{\NeXTGraphic head-to-testing.png \width16000 \height9200 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 14. HEAD points to the current branch\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 What is the significance of that? Well, let\'92s do another commit:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ vim test.rb\
$ git commit -a -m 'made a change'\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 {{\NeXTGraphic advance-testing.png \width16000 \height6680 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 15. The HEAD branch moves forward when a commit is made\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 This is interesting, because now your 
\f2 \cf6 \cb7 testing
\f1 \cf2 \cb3  branch has moved forward, but your 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3  branch still points to the commit you were on when you ran 
\f2 \cf6 \cb7 git checkout
\f1 \cf2 \cb3  to switch branches. Let\'92s switch back to the 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3  branch:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ git checkout master\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 {{\NeXTGraphic checkout-master.png \width16000 \height6680 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 16. HEAD moves when you checkout\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 That command did two things. It moved the HEAD pointer back to point to the 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3  branch, and it reverted the files in your working directory back to the snapshot that 
\f2 \cf6 \cb7 master
\f1 \cf2 \cb3  points to. This also means the changes you make from this point forward will diverge from an older version of the project. It essentially rewinds the work you\'92ve done in your 
\f2 \cf6 \cb7 testing
\f1 \cf2 \cb3  branch so you can go in a different direction.\cb1 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \tamart600 \tamarb600 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrb\brdrs\brdrw20\brdrcf8 \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth3280\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt120 \clpadl120 \clpadb120 \clpadr120 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth9840\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt120 \clpadl120 \clpadb120 \clpadr120 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\fs24 \cf2 \cb3 Note\cb1 \cell 
\pard\intbl\itap1\pardeftab720\partightenfactor0
\cf2 \cb3 Switching branches changes files in your working directory\cb1 \
\cb3 It\'92s important to note that when you switch branches in Git, files in your working directory will change. If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. If Git cannot do it cleanly, it will not let you switch at all.\cb1 \cell \lastrow\row
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \cb3 Let\'92s make a few changes and commit again:\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ vim test.rb\
$ git commit -a -m 'made other changes'\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 Now your project history has diverged (see {\field{\*\fldinst{HYPERLINK "https://git-scm.com/book/en/v2/ch00/divergent_history"}}{\fldrslt \cf5 \cb3 Divergent history}}). You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work. Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you\'92re ready. And you did all that with simple 
\f2 \cf6 \cb7 branch
\f1 \cf2 \cb3 , 
\f2 \cf6 \cb7 checkout
\f1 \cf2 \cb3 , and 
\f2 \cf6 \cb7 commit
\f1 \cf2 \cb3  commands.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0 \cf2 {{\NeXTGraphic advance-master.png \width16000 \height10240 \noorient \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\partightenfactor0
\cf2 \
\cb3 Figure 17. Divergent history\cb1 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 You can also see this easily with the 
\f2 \cf6 \cb7 git log
\f1 \cf2 \cb3  command. If you run 
\f2 \cf6 \cb7 git log --oneline --decorate --graph --all
\f1 \cf2 \cb3  it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.\cb1 \
\pard\pardeftab720\partightenfactor0

\f2\fs25\fsmilli12600 \cf6 \cb7 $ git log --oneline --decorate --graph --all\
* c2b9e (HEAD, master) made other changes\
| * 87ab2 (testing) made a change\
|/\
* f30ab add feature #32 - ability to add new formats to the\
* 34ac2 fixed bug #1328 - stack overflow under certain conditions\
* 98ca9 initial commit of my project\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy. Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).\cb1 \
\cb3 This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project\'92s files into a second directory. This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous. Also, because we\'92re recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do. These features help encourage developers to create and use branches often.\cb1 \
\cb3 Let\'92s see why you should do so.\cb1 \
}